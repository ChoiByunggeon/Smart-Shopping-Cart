#include <BearSSLHelpers.h>
#include <CertStoreBearSSL.h>
#include <ESP8266WiFi.h>
#include <ESP8266WiFiAP.h>
#include <ESP8266WiFiGeneric.h>
#include <ESP8266WiFiGratuitous.h>
#include <ESP8266WiFiMulti.h>
#include <ESP8266WiFiScan.h>
#include <ESP8266WiFiSTA.h>
#include <ESP8266WiFiType.h>
#include <WiFiClient.h>
#include <WiFiClientSecure.h>
#include <WiFiServer.h>
#include <WiFiServerSecure.h>
#include <WiFiUdp.h> 
#include <SoftwareSerial.h> 

SoftwareSerial mySerial(D6, D7); // (RX, TX)

#include "HX711.h"                    //로드셀 헤더
#define calibration_factor -7050.0 
const int DOUT = D0;
const int CLK = D1;
HX711 scale;

char *barcode = "";
char bcd[13] = {'0'};
char *weight = "200";

int i = 0;    //바코드 값 받기 위해 사용하는 idx
int j = 0;    //바코드 값 초기화를 위해 사용하는 idx
int cnt = 0;  //바코드가 인식 되었는지 확인하는 변수

int tmp_weight = 0;
int tmp = 0;

const char *ssid = "AndroidAP6572";
const char *pwd = "yewon0412";
const char *serverid = "3.23.221.118";

 

void setup() {

  Serial.begin(9600);
  mySerial.begin(2400);

  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid,pwd);

  while(WiFi.status() != WL_CONNECTED){
    delay(500);
    Serial.print(".");

  }
  Serial.println("");
  Serial.println("WIFI CONNECTED");
  Serial.println(WiFi.localIP());
  Serial.println("connection Start");

  scale.set_scale(calibration_factor); 
  scale.begin(DOUT, CLK);

}


void loop() {

   char Weight[65] = {'0'};
  
   WiFiClient client ;

   if (!client.connect("3.23.221.118", 7579)) {
    Serial.println("connection failed");//서버 접속에 실패
    return;
  }

  else{
     //바코드 인식 코드 & 서버 전송
     if(mySerial.available() > 0){

      bcd[i] = mySerial.read();

      if(i == 12){
          i = -1;
          barcode = bcd;
          Serial.println(barcode);
          client.write("POST /Mobius/CART_A/BARCODE HTTP/1.1\r\nX-M2M-Origin: S\r\nX-M2M-RI: BC\r\nContent-Type: ");
          client.write("application/json;ty=4\r\nhost: 3.23.221.118:7579\r\naccept: application/json\r\ncontent-length: 35\r\nConnection: close\r\n\r\n{\"m2m:cin\":{\"con\":\"");
          client.write(barcode);
          client.write("\"}}");

          for(j = 0; j < 13; j++){
            bcd[j] = '0';    
          }
          
          String recevbline = client.readStringUntil('\r');
          Serial.println(recevbline);

          barcode = NULL;

          cnt = 1;

      }
       i = i + 1;
     }
    else if(cnt == 1){
         //무게 측정 코드 & 서버 전송
         
         Serial.print("Weight Reading: ");
         delay(2000);

         tmp_weight = scale.get_units()*18.5-200;
         
         itoa(tmp_weight-tmp, Weight, 10);
         weight = Weight;
         tmp = tmp_weight;
         
         Serial.println(weight);
         
         
         client.write("POST /Mobius/CART_A/weight HTTP/1.1\r\nX-M2M-Origin: S\r\nX-M2M-RI: sum\r\nContent-Type: ");
         client.write("application/json;ty=4\r\nhost: 3.23.221.118:7579\r\naccept: application/json\r\ncontent-length: 25\r\nConnection: close\r\n\r\n{\"m2m:cin\":{\"con\":\"");
         client.write(weight);
         client.write("\"}}");

         String recevbline2 = client.readStringUntil('\r');
         Serial.print(recevbline2);

         cnt = 0;
    }
  }
}
